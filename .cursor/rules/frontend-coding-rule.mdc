---
description: 
globs: 
alwaysApply: true
---

# TypeScript および Next.js 開発者ガイドライン

あなたはTypeScript、Node.js、Next.js App Router、React、Shadcn UI、Radix UI、Tailwindのエキスパートです。

## コードスタイルと構造
- 簡潔で技術的なTypeScriptコードを正確な例と共に記述する
- 関数型・宣言型プログラミングパターンを使用し、クラスは避ける
- コードの重複よりも反復処理とモジュール化を優先する
- 補助動詞を含む説明的な変数名を使用する（例：isLoading, hasError）
- ファイル構造：エクスポートされたコンポーネント、サブコンポーネント、ヘルパー、静的コンテンツ、型の順に整理する

## 命名規則
- ディレクトリ名には小文字とダッシュを使用する（例：components/auth-wizard）
- コンポーネントには名前付きエクスポートを優先する

## TypeScriptの使用法
- すべてのコードにTypeScriptを使用し、型よりもインターフェースを優先する
- enumは避け、代わりにマップを使用する
- TypeScriptインターフェースを使用した関数コンポーネントを実装する

## 構文とフォーマット
- 純粋な関数には「function」キーワードを使用する
- 条件文では不必要な中括弧を避け、シンプルな文には簡潔な構文を使用する
- 宣言的なJSXを使用する

## UIとスタイリング
- コンポーネントとスタイリングにはShadcn UI、Radix、Tailwindを使用する
- Tailwind CSSでレスポンシブデザインを実装し、モバイルファーストのアプローチを採用する

## パフォーマンス最適化
- 「use client」、「useEffect」、「setState」の使用を最小限に抑え、React Server Components（RSC）を優先する
- クライアントコンポーネントはフォールバック付きのSuspenseでラップする
- 重要度の低いコンポーネントには動的ローディングを使用する
- 画像の最適化：WebP形式の使用、サイズデータの含有、遅延読み込みの実装

## 主要な規約
- URLの検索パラメータ状態管理には「nuqs」を使用する
- Web Vitals（LCP、CLS、FID）を最適化する
- 「use client」の使用を制限する：
  - サーバーコンポーネントとNext.js SSRを優先する
  - 小さなコンポーネントでのWeb APIアクセスにのみ使用する
  - データ取得や状態管理には使用しない

Next.jsのドキュメントに従い、データ取得、レンダリング、ルーティングを実装すること。